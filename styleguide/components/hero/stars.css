:root {
 --d: 4px;
 --numberOfStars: 20;
 --largeScreenBreakPoint: 1441px;
 --x-wideScreenBreakPoint: 1920px;
}

.stars {
  /* ensure to right of left mountain */
  left: 10%;
  width: 1000px;
  height: 350px;

  @media (min-width: var(--largeScreenBreakPoint)) {
    width: 1200px;
  }

  @media (min-width: var(--x-wideScreenBreakPoint)) {
    width: 1600px;
  }
}

.particle,
.twinkle {
  position: absolute;
  border-radius: 50%;
}

.particle {
  width: var(--d);
  height: var(--d);
  animation-name: shoot, fade;

  /* TODO: How to recreate this without sass loops??
  @for $i from 0 to var(--numberOfStars) {
    $t: (1 + 0.01 * random(100)) * 25s;

    &:nth-child(#{$i + 1}) {
      transform: translate(random(1000) * 1px, -0.01 * random(300) * 1px);
      background: hsl(random(360), 100%, 65%);
      animation-duration: $t;
      opacity: 0.3;
      animation-delay: -0.01 * random(100) * $t;
    }
  }
  */
}

@keyframes shoot {
  0% { transform: translate(50vw, 50vh); }
}

@keyframes fade { to { opacity: 0; } }

.mavenConstellation {
  background-image: url(maven-constellation.svg);
  position: absolute;
  width: 59px;
  height: 41px;
  right: 48%;
  top: 28%;
  opacity: 0;
  animation-name: fadeInFlicker;
  animation-iteration-count: infinite;
  animation-timing-function: ease-out;
  animation-duration: 15s;
}

.largeStar {
  background-image: url(star-lg.svg);
  position: absolute;
  width: 17px;
  height: 17px;
  right: 21%;
  top: 19%;
  animation-name: flicker;
  animation-iteration-count: infinite;
  animation-timing-function: ease-out;
  animation-duration: 10s;
}

.twinkle {
  width: var(--d);
  height: var(--d);
  animation-name: flicker;
  animation-iteration-count: infinite;
  animation-timing-function: ease-out;

  /* TODO: How to recreate this without sass loops??
  @for $i from 0 to $numberOfStars {
    $leftCliffClearance: 80px;
    $t: (1 + 0.01 * random(100)) * 4s;
    $x: random(600) * 1px + $leftCliffClearance;
    // We add 20px to ensure the stars aren't jammed up to top
    $y: (random(300) * 1px) + 20px;

    &:nth-child(#{$i + 1}) {
      transform: translate($x, $y);
      background: white;
      animation-duration: $t;
      animation-delay: -0.01 * random(100) * $t;
      opacity: 1;
    }
  }
  */
}

@keyframes flicker {
  0% { opacity: 1; }
  50% { opacity: 0; }
  100% { opacity: 1; }
}

@keyframes fadeInFlicker {
  0% { opacity: 0; }
  50% { opacity: 1; }
  100% { opacity: 0; }
}
